from sqlalchemy import create_engine, Column, Integer, String, Table, ForeignKey
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
from tabulate import tabulate
import random

Base = declarative_base()

student_course = Table(
    'student_course', Base.metadata,
    Column('student_id', Integer, ForeignKey('students.id')),
    Column('course_id', Integer, ForeignKey('courses.id'))
)

class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    courses = relationship('Course', secondary=student_course, back_populates='students')

class Course(Base):
    __tablename__ = 'courses'
    id = Column(Integer, primary_key=True)
    title = Column(String, nullable=False)
    students = relationship('Student', secondary=student_course, back_populates='courses')

engine = create_engine('sqlite:///students.db', echo=False)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

if not session.query(Course).count():
    course_titles = ["Math", "History", "Physics", "Programming", "Art"]
    courses = [Course(title=title) for title in course_titles]
    session.add_all(courses)
    session.commit()

    courses = session.query(Course).all()
    for i in range(1, 21):
        student = Student(name=f"Student {i}")
        student.courses = random.sample(courses, random.randint(1, 3))
        session.add(student)
    session.commit()

def show_courses():
    courses = session.query(Course).all()
    table = [(c.id, c.title) for c in courses]
    print("\n–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤:")
    print(tabulate(table, headers=["ID", "–ù–∞–∑–≤–∞ –∫—É—Ä—Å—É"], tablefmt="grid"))

def show_students():
    students = session.query(Student).all()
    table = [(s.id, s.name, ", ".join(c.title for c in s.courses)) for s in students]
    print("\n–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:")
    print(tabulate(table, headers=["ID", "–Ü–º'—è", "–ö—É—Ä—Å–∏"], tablefmt="grid"))

def add_student():
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: ")
    show_courses()
    course_id = int(input("ID –∫—É—Ä—Å—É –¥–ª—è –∑–∞–ø–∏—Å—É: "))
    course = session.get(Course, course_id)
    if course:
        new_student = Student(name=name, courses=[course])
        session.add(new_student)
        session.commit()
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ {name} –Ω–∞ –∫—É—Ä—Å {course.title}")
    else:
        print("‚ùå –ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def students_by_course():
    show_courses()
    course_id = int(input("–í–≤–µ–¥—ñ—Ç—å ID –∫—É—Ä—Å—É: "))
    course = session.get(Course, course_id)
    if course:
        table = [(s.id, s.name) for s in course.students]
        print(f"\n–°—Ç—É–¥–µ–Ω—Ç–∏ –Ω–∞ –∫—É—Ä—Å—ñ {course.title}:")
        print(tabulate(table, headers=["ID", "–Ü–º'—è"], tablefmt="grid"))
    else:
        print("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def courses_by_student():
    show_students()
    student_id = int(input("–í–≤–µ–¥—ñ—Ç—å ID —Å—Ç—É–¥–µ–Ω—Ç–∞: "))
    student = session.get(Student, student_id)
    if student:
        table = [(c.id, c.title) for c in student.courses]
        print(f"\n–ö—É—Ä—Å–∏, –Ω–∞ —è–∫—ñ –∑–∞–ø–∏—Å–∞–Ω–∏–π {student.name}:")
        print(tabulate(table, headers=["ID", "–ù–∞–∑–≤–∞ –∫—É—Ä—Å—É"], tablefmt="grid"))
    else:
        print("–°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def update_student():
    show_students()
    student_id = int(input("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: "))
    student = session.get(Student, student_id)
    if student:
        new_name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è: ")
        student.name = new_name
        session.commit()
        print(f"‚úÖ –Ü–º'—è –æ–Ω–æ–≤–ª–µ–Ω–æ: {student.name}")
    else:
        print("–°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def delete_student():
    show_students()
    student_id = int(input("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: "))
    student = session.get(Student, student_id)
    if student:
        session.delete(student)
        session.commit()
        print(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ ID={student_id}")
    else:
        print("–°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# --- –ú–ï–ù–Æ ---
def menu():
    while True:
        print("\n=== –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ ===")
        print("1. –î–æ–¥–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫—É—Ä—Å–∏")
        print("3. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")
        print("4. –°—Ç—É–¥–µ–Ω—Ç–∏ –∑–∞ –∫—É—Ä—Å–æ–º")
        print("5. –ö—É—Ä—Å–∏ –∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º")
        print("6. –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        print("7. –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        print("0. –í–∏–π—Ç–∏")

        choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ")
        if choice == "1":
            add_student()
        elif choice == "2":
            show_courses()
        elif choice == "3":
            show_students()
        elif choice == "4":
            students_by_course()
        elif choice == "5":
            courses_by_student()
        elif choice == "6":
            update_student()
        elif choice == "7":
            delete_student()
        elif choice == "0":
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")

if __name__ == "__main__":
    menu()
